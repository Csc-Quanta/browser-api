syntax = "proto3";
import "tx.proto";
import "address.proto";
package org.csc.browserAPI.gens;

enum PBLKTModule {
     BOK = 0; // Block
};

enum PBLKCommand {
	GTB = 0; // 获取最新的block ReqGetTheBestBlock		ResGetTheBestBlock
	GBB = 1; // 获取一组block 	ReqGetBatchBlocks，ResGetBatchBlocks
	GHA = 2; // 根据 block hash 获取 block 详情	ReqGetBlockByBlockHash,ResGetBlockByBlockHash
	GHE = 3; // 根据 block height 获取 block 详情	ReqGetBlockByBlockHeight,ResGetBlockByBlockHeight
	GTH = 4; // 根据 tx hash 获取 block 详情	ReqGetBlockByTxHash，ResGetBlockByTxHash
	GGB = 5; // 获取创始块 ReqGetGenisBlock,RetGetGenisBlock
	GBX = 6;//通过区块高度获取区块里面的交易 ReqGetTxByBlkHeight ResGetTxByBlkHeight
}
message ReqGetTxByBlkHeight{
	int32 pageSize = 1;//每页显示条数
	int32 pageNo = 2;//当前页
	int32 blockNumber = 3;//块的高度
}
message ResGetTxByBlkHeight{
	int32 ret = 1;
	//交易信息
	repeated Transaction txs = 2;
	//总条数
	int32 totalCount = 3;
}


message ReqGetGenisBlock {

}

message RetGetGenisBlock {
	int32 ret = 1;
	BlockInfo block = 2;
}

message ReqGetTheBestBlock {

}

message ResGetTheBestBlock {
	int32 ret = 1;
	BlockInfo block = 2;
}

message ReqGetBatchBlocks {
	int32 pageNo = 1;
	int32 pageSize = 2;
}

message ResGetBatchBlocks {
	int32 ret = 1;
	repeated BlockInfo blocks = 2;
	int64 totalCount = 3;
}

message ReqGetBlockByBlockHash {
	string blockHash = 1;
}

message ResGetBlockByBlockHash {
	int32 ret = 1;
	BlockInfo block = 2;
}

message ReqGetBlockByBlockHeight {
	int64 blockNumber = 1;
}

message ResGetBlockByBlockHeight {
	int32 ret = 1;
	BlockInfo block = 2;
}

message ReqGetBlockByTxHash {
	string txHash = 1;
}

message ResGetBlockByTxHash {
	int32 ret = 1;
	BlockInfo block = 2;
}

message BlockInfo {
	BlockHeader header = 1;
	BlockBody body = 2;
}

message BlockHeader {
	string parentHash = 1;
	string txTrieRoot = 3;
	int64 timestamp = 4;
	int64 blockNumber = 5;//number
	string extData = 7 [jstype = JS_NORMAL];
	string nonce = 8;
	string blockHash = 9;
	repeated string txHashs = 10;
	int32 txCount = 11;
	int64 sliceId = 12;
	BlockMiner miner = 13;//不完全信息，仅包含 balance,address.bcuid为新增字段，放在addressInfo中
	repeated string nodes = 14;
	string avetx = 15;//块内平均交易时间
}

message BlockBody {
	repeated Transaction transactions = 1;
}

message BlockMiner {
	string node = 1;
	string reward = 3;
	string address = 4;
	string bcuid = 5;
}


